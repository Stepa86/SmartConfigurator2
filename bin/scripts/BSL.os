Перем СредаРазработки;
Перем Обмен;

#Область ПрограммныйИнтерфейс

Процедура ВыполнитьАнализТекущегоМодуля() Экспорт
	
	ФайлАнализатора = Новый Файл("bsl-language-server.jar");
	Если НЕ ФайлАнализатора.Существует() Тогда
		
		ТекстСообщения = "Анализ модуля не выполнен. Не найден анализатор: bsl-language-server.jar. Проверьте наличие файла.";
		
		Взаимодействие = ЗагрузитьСценарий("core/Взаимодействие.os");
		Взаимодействие.Предупреждение(ТекстСообщения, "Анализ BSL");
		
		Возврат;
	КонецЕсли;
	
	времКаталог = ОбеспечитьВременныйКаталог();
	
	ТекстМодуля = СредаРазработки.ТекстМодуля();
	ТекстМодуляКоллекция = СтрРазделить(ТекстМодуля, Символы.ПС, Истина);
	
	ИмяФайла = времКаталог + "module.bsl";
	Обмен.ЗаписатьРезультатВФайл(ИмяФайла, ТекстМодуля);
	
	КодВозврата = 0;
	
	строкаЗапуска = СтрокаЗапуска(времКаталог);
	
	ЗапуститьПриложение(строкаЗапуска, , Истина, КодВозврата);
	
	ТЗРезультатАнализа = ТаблицаРезультата(времКаталог, ТекстМодуляКоллекция);
	
	ВыборИзПредставленияСписка = ЗагрузитьСценарий("core\ChoiceInListView.os");
	допПараметры = Неопределено;
	
	Для ц = 0 По 1000 Цикл
		
		НомСтр = ВыборИзПредставленияСписка.ВыбратьИзСписка(ТЗРезультатАнализа, "Описание", "НомерСтроки", , допПараметры);
		
		Если НомСтр = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СредаРазработки.ПерейтиИВыделитьСтрокуПоНомеру(НомСтр);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ВажностьЗамечания(Знач пВажность)
	
	пВажность = НРег(пВажность);
	
	Если пВажность = "information" Тогда
		Возврат "Информация";
	ИначеЕсли пВажность = "hint" Тогда
		Возврат "Подсказка";
	ИначеЕсли пВажность = "warning" Тогда
		Возврат "Предупреждение";
	Иначе
		Возврат пВажность;
	КонецЕсли;
	
КонецФункции

Функция ОбеспечитьВременныйКаталог()
	
	КаталогВременныхДанных = Новый Файл("tmp");
	Если НЕ КаталогВременныхДанных.Существует() Тогда
		СоздатьКаталог("tmp");
	КонецЕсли;
	
	КаталогВременныхДанных = Новый Файл("tmp/bslls");
	Если НЕ КаталогВременныхДанных.Существует() Тогда
		СоздатьКаталог("tmp/bslls");
	КонецЕсли;
	
	Возврат "tmp/bslls/";
	
КонецФункции

Функция СтрокаЗапуска(Знач пКаталог)
	
	СтрокаЗапуска = СтрШаблон("java -jar bsl-language-server.jar --analyze --reporter json --srcDir %1 -o %1", пКаталог);
	
	файлНастроек = Новый Файл("settings/bsl-language-server.json");
	Если файлНастроек.Существует() Тогда
		СтрокаЗапуска = СтрокаЗапуска + " --configuration settings/bsl-language-server.json";
	КонецЕсли;
	
	Возврат СтрокаЗапуска;
	
КонецФункции

Функция ТаблицаРезультата(Знач пКаталог, ТекстМодуляКоллекция)
	
	ТЗРезультатАнализа = Новый ТаблицаЗначений();
	ТЗРезультатАнализа.Колонки.Добавить("Описание", , "Диагностика", 200);
	ТЗРезультатАнализа.Колонки.Добавить("Важность", , "Важность", 200);
	ТЗРезультатАнализа.Колонки.Добавить("НомерСтроки", , "Ном.", 20);
	ТЗРезультатАнализа.Колонки.Добавить("Содержимое", , "Оригинал", 200);
	ТЗРезультатАнализа.Колонки.Добавить("СдвигНачало", , "Нач.", 50);
	ТЗРезультатАнализа.Колонки.Добавить("СдвигКонец", , "Кон.", 50);
	
	ПутьКФайлуОтчета = пКаталог + "/bsl-json.json";
	
	ФайлОтчета = Новый Файл(ПутьКФайлуОтчета);
	
	Если НЕ ФайлОтчета.Существует() Тогда
		Возврат ТЗРезультатАнализа;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ПутьКФайлуОтчета, "UTF-8");
	Результат = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Для каждого цФайл Из Результат.fileinfos Цикл
		
		Для каждого цЗамечение Из цФайл.diagnostics Цикл
			
			НомерСтроки = цЗамечение.range.start.line;
			Описание = "" + НомерСтроки + " : " + цЗамечение.message;
			
			новСтрокаАнализа = ТЗРезультатАнализа.Добавить();
			новСтрокаАнализа.Описание = цЗамечение.message;
			новСтрокаАнализа.НомерСтроки = Число(НомерСтроки) + 1;
			новСтрокаАнализа.Содержимое = ТекстМодуляКоллекция[НомерСтроки + 1];
			новСтрокаАнализа.СдвигНачало = цЗамечение.range.start.character;
			новСтрокаАнализа.СдвигКонец = цЗамечение.range.end.character;
			новСтрокаАнализа.Важность = ВажностьЗамечания(цЗамечение.severity);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТЗРезультатАнализа.Сортировать("НомерСтроки");
	
	Возврат ТЗРезультатАнализа;
	
КонецФункции

#КонецОбласти

Процедура ПриСозданииОбъекта()
	
	СредаРазработки = ЗагрузитьСценарий("core\СредаРазработки.os");
	Обмен = ЗагрузитьСценарий("core\Обмен.os");
	
КонецПроцедуры