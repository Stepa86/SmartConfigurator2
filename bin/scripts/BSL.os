Перем СредаРазработки;
Перем Обмен;

#Область ПрограммныйИнтерфейс

Процедура ВыполнитьАнализТекущегоМодуля() Экспорт
	
	ФайлАнализатора = Новый Файл("bsl-language-server.jar");
	Если НЕ ФайлАнализатора.Существует() Тогда
		
		ТекстСообщения = "Анализ модуля не выполнен. Не найден анализатор: bsl-language-server.jar. Проверьте наличие файла.";
		
		Взаимодействие = ЗагрузитьСценарий("core/Взаимодействие.os");
		Взаимодействие.Предупреждение(ТекстСообщения, "Анализ BSL");
		
		Возврат;
	КонецЕсли;
	
	КаталогВременныхДанных = Новый Файл("tmp");
	Если НЕ КаталогВременныхДанных.Существует() Тогда
		СоздатьКаталог("tmp");
	КонецЕсли;
	
	ТекстМодуля = СредаРазработки.ТекстМодуля();
	ТекстМодуляКоллекция = СтрРазделить(ТекстМодуля, Символы.ПС, Истина);
	
	ИмяФайла = "tmp/module.bsl";
	Обмен.ЗаписатьРезультатВФайл(ИмяФайла, ТекстМодуля);
	
	КодВозврата = 0;
	СтрокаЗапуска = "java -jar bsl-language-server.jar --analyze --reporter json --srcDir tmp -o tmp";
	
	файлНастроек = Новый Файл("settings/bsl-language-server.json");
	Если файлНастроек.Существует() Тогда
		СтрокаЗапуска = СтрокаЗапуска + " --configuration settings/bsl-language-server.json";
	КонецЕсли;

	ЗапуститьПриложение(СтрокаЗапуска, , Истина, КодВозврата);
	
	ПутьКФайлуОтчета = "tmp/bsl-json.json";
	
	ФайлОтчета = Новый Файл(ПутьКФайлуОтчета);
	
	Если НЕ ФайлОтчета.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.ОткрытьФайл(ПутьКФайлуОтчета, КодировкаТекста.UTF8);
	Результат = Неопределено;
	КоллекцияДиагностик(ЧтениеJSON, Результат);
	ЧтениеJSON.Закрыть();
	
	Стр = "";
	Для каждого КлючЗначение Из Результат Цикл
		Стр = Стр + "|" + КлючЗначение.Ключ;
	КонецЦикла;
	
	ВыборИзПредставленияСписка = ЗагрузитьСценарий("core\ChoiceInListView.os");
	
	ТЗРезультатАнализа = Новый ТаблицаЗначений();
	ТЗРезультатАнализа.Колонки.Добавить("Описание", , "Диагностика", 200);
	ТЗРезультатАнализа.Колонки.Добавить("Важность", , "Важность", 200);
	ТЗРезультатАнализа.Колонки.Добавить("НомерСтроки", , "Ном.", 20);
	ТЗРезультатАнализа.Колонки.Добавить("Содержимое", , "Оригинал", 200);
	ТЗРезультатАнализа.Колонки.Добавить("СдвигНачало", , "Нач.", 50);
	ТЗРезультатАнализа.Колонки.Добавить("СдвигКонец", , "Кон.", 50);
	
	Диагностики = Результат.Получить("fileinfos")[0].Получить("diagnostics");
	Для каждого Диагностика Из Диагностики Цикл
		
		НомерСтроки = Диагностика.Получить("range").Получить("start").Получить("line");
		Описание = "" + НомерСтроки + " : " + Диагностика.Получить("message");
		
		СтрокаОписанияДиагностики = ТЗРезультатАнализа.Добавить();
		СтрокаОписанияДиагностики.Описание = Диагностика.Получить("message");
		СтрокаОписанияДиагностики.НомерСтроки = Число(НомерСтроки) + 1;
		СтрокаОписанияДиагностики.Содержимое = ТекстМодуляКоллекция[НомерСтроки + 1];
		СтрокаОписанияДиагностики.СдвигНачало = Диагностика.Получить("range").Получить("start").Получить("character");
		СтрокаОписанияДиагностики.СдвигКонец = Диагностика.Получить("range").Получить("end").Получить("character");
		СтрокаОписанияДиагностики.Важность = ВажностьЗамечания( Диагностика.Получить("severity"));
		
	КонецЦикла;
	
	допПараметры = Неопределено;

	Для ц = 0 По 1000 Цикл
		
		НомСтр = ВыборИзПредставленияСписка.ВыбратьИзСписка(ТЗРезультатАнализа, "Описание", "НомерСтроки",,допПараметры);

		Если НомСтр = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СредаРазработки.ПерейтиИВыделитьСтрокуПоНомеру(НомСтр);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура КоллекцияДиагностик(ЧтениеJSON, Дерево)
	
	ТипыЗначениеJSON = Новый Массив();
	ТипыЗначениеJSON.Добавить(ТипЗначенияJSON.Число);
	ТипыЗначениеJSON.Добавить(ТипЗначенияJSON.Строка);
	ТипыЗначениеJSON.Добавить(ТипЗначенияJSON.Булево);
	ТипыЗначениеJSON.Добавить(ТипЗначенияJSON.Null);
	
	ИмяСвойства = Неопределено;
	
	Пока ЧтениеJSON.Прочитать() Цикл
		TипJSON = ЧтениеJSON.ТипТекущегоЗначения;
		
		Если TипJSON = ТипЗначенияJSON.НачалоОбъекта
			ИЛИ TипJSON = ТипЗначенияJSON.НачалоМассива Тогда
			НовыйОбъект = ?(TипJSON = ТипЗначенияJSON.НачалоОбъекта, Новый Соответствие, Новый Массив);
			
			Если ТипЗнч(Дерево) = Тип("Массив") Тогда
				Дерево.Добавить(НовыйОбъект);
			ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") И ЗначениеЗаполнено(ИмяСвойства) Тогда
				Дерево.Вставить(ИмяСвойства, НовыйОбъект);
			КонецЕсли;
			
			КоллекцияДиагностик(ЧтениеJSON, НовыйОбъект);
			
			Если Дерево = Неопределено Тогда
				Дерево = НовыйОбъект;
			КонецЕсли;
		ИначеЕсли TипJSON = ТипЗначенияJSON.ИмяСвойства Тогда
			ИмяСвойства = ЧтениеJSON.ТекущееЗначение;
		ИначеЕсли ТипыЗначениеJSON.Найти(TипJSON) <> Неопределено Тогда
			Если ТипЗнч(Дерево) = Тип("Массив") Тогда
				Дерево.Добавить(ЧтениеJSON.ТекущееЗначение);
			ИначеЕсли ТипЗнч(Дерево) = Тип("Соответствие") Тогда
				Дерево.Вставить(ИмяСвойства, ЧтениеJSON.ТекущееЗначение);
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВажностьЗамечания(Знач пВажность)

	пВажность = НРег(пВажность);

	Если пВажность = "information" Тогда
		Возврат "Информация";
	ИначеЕсли пВажность = "hint" Тогда
		Возврат "Подсказка";
	ИначеЕсли пВажность = "warning" Тогда
		Возврат "Предупреждение";
	Иначе
		Возврат пВажность;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Процедура ПриСозданииОбъекта()
	
	СредаРазработки = ЗагрузитьСценарий("core\СредаРазработки.os");
	Обмен = ЗагрузитьСценарий("core\Обмен.os");
	
КонецПроцедуры