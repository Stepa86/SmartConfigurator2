#Использовать WinExt

Перем СредаРазработки;

Перем Обмен;
Перем Взаимодействие;
Перем ВыборИзСписка;

Процедура ПриСозданииОбъекта()
	
	СредаРазработки = ЗагрузитьСценарий("core\СредаРазработки.os");

	Обмен = ЗагрузитьСценарий("core\Обмен.os");
	Взаимодействие = ЗагрузитьСценарий("core\Взаимодействие.os");
	ВыборИзСписка = ЗагрузитьСценарий("core\SelectValue.os");
	
КонецПроцедуры

#Область ПрограммныйИнтерфейс

Процедура ПерейтиВНачалоМетода() Экспорт
	
	Данные = СредаРазработки.ТекстВышеКурсора();
	НомерСтроки = ПолучитьНомерСтрокиНачалаМетода(Данные);
	Если НомерСтроки > 0 Тогда
		СредаРазработки.ПерейтиКСтрокеПоНомеру(НомерСтроки);
		СредаРазработки.ПерейтиВНачалоСтроки();
	КонецЕсли;
	
КонецПроцедуры

Процедура ПерейтиВКонецМетода() Экспорт
	
	Данные = СредаРазработки.ТекстВышеКурсора();
	НомерСтроки = ПолучитьНомерСтрокиНачалаМетода(Данные);
	Если НомерСтроки > 0 Тогда

		СредаРазработки.ПерейтиКСтрокеПоНомеру(НомерСтроки);
		СредаРазработки.ПерейтиВНачалоСтроки();
		СредаРазработки.ПерейтиПоОператорнымСкобкамНазад();
		СредаРазработки.ПерейтиВНачалоСтроки();

	КонецЕсли;
	
КонецПроцедуры

Процедура СписокМетодов() Экспорт
	
	ОбработатьМодуль("^\s*(процедура|функция|procedure|function)\s+(.*)\(");
	
КонецПроцедуры

Процедура СписокОбластей() Экспорт
	
	ОбработатьМодуль("^\s*(\#Область|\#region)\s+(.*)");
	
КонецПроцедуры

Процедура ПоискРегулярныеВыражения() Экспорт
	
	УсловиеПоиска = Взаимодействие.ВвестиСтроку();
	Если УсловиеПоиска <> "" Тогда
		ОбработатьМодуль(УсловиеПоиска, "Поиск");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьИмяМетода() Экспорт
	
	Данные = СредаРазработки.ТекстВышеКурсора();
	ИмяМетода = ИмяМетода(Данные);
	
	Если ИмяМетода = Неопределено Тогда
		Взаимодействие.УведомитьЧерезТрей("Метод не определен");
		Возврат;
	КонецЕсли;

	Взаимодействие.ВвестиСтроку(ИмяМетода);
	
КонецПроцедуры

Процедура ПоказатьИмяСекции() Экспорт
	
	Данные = СредаРазработки.ТекстВышеКурсора();
	ИмяСекции = ИмяСекции(Данные);

	Если ИмяСекции = Неопределено Тогда
		Взаимодействие.УведомитьЧерезТрей("Секция не определена");
		Возврат;
	КонецЕсли;

	Взаимодействие.ВвестиСтроку(ИмяСекции);
	
КонецПроцедуры

Процедура ВыбратьИмяМетода() Экспорт
	
	ИмяМетода = ПодготовитьДанныеДляВыбора("^\s*(процедура|функция|procedure|function)\s+(.*)\(", "ВыборИмениМетода");
	Если ИмяМетода <> Неопределено Тогда
		СредаРазработки.УстановитьТекстВВыделение(ИмяМетода);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыбратьРанееНабранноеСлово() Экспорт
	
	Данные = СредаРазработки.ТекстМодуля();
	
	СтрДанные = Данные;
	СтрДанные = СтрЗаменить(СтрДанные, Символы.ПС, " ");
	СтрДанные = СтрЗаменить(СтрДанные, Символы.ВК, " ");
	
	РегВыражение = Новый РегулярноеВыражение("(\s|>|<|\*|}|{|=|\||\""""|\.|,|:|;|-|\+|\(|\)|\b|\r\n)");
	РегВыражение.ИгнорироватьРегистр = Истина;
	РегВыражение.Многострочный = Истина;
	СтрДанные = РегВыражение.Заменить(СтрДанные, " ");
	
	Данные = СтрРазделить(СтрДанные, " ", Ложь);
	
	УникальныеСлова = Новый Соответствие();
	МинимальнаяДлинаСлова = 5;
	
	Для Каждого Стр Из Данные Цикл
		Стр = СокрЛП(Стр);
		Если СтрДлина(Стр) > МинимальнаяДлинаСлова Тогда
			УникальныеСлова.Вставить(Стр, Стр);
		КонецЕсли;
	КонецЦикла;
	
	СловарьЗаготовок = Обмен.ПолучитьТекстИзФайла("words.txt");
	Данные = СтрРазделить(СловарьЗаготовок, Символы.ПС, Ложь);
	
	Для Каждого Стр Из Данные Цикл
		Стр = СокрЛП(Стр);
		УникальныеСлова.Вставить(Стр, Стр);
	КонецЦикла;
	
	РанееНабранноеСлово = ВыборИзСписка.ВыбратьИзСписка(УникальныеСлова);
	
	Если РанееНабранноеСлово <> Неопределено Тогда
		СредаРазработки.УстановитьТекстВВыделение(РанееНабранноеСлово);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьНомерСтрокиНачалаМетода(Данные)
	
	РегВыражение = Новый РегулярноеВыражение("^\s*(процедура|функция|procedure|function)\s+");
	РегВыражение.ИгнорироватьРегистр = Истина;
	
	СтрокиМодуля = СтрРазделить(Данные, Символы.ПС, Истина);
	КолСтрок = СтрокиМодуля.Количество() - 1;
	Для А = - КолСтрок по 0 Цикл
		Стр = СтрокиМодуля.Получить(- А);
		Если РегВыражение.Совпадает(Стр) = Истина Тогда
			Возврат (- А + 1);
		КонецЕсли;
	КонецЦикла;

	Возврат 0;

КонецФункции

Функция СтрокиПоРегВыражению(Данные, СтрокаПоиска, РежимЗаполнения = 0)
	
	СписокДляВыбора = Новый Соответствие();
	СписокДляВыбора.Очистить();
	
	РегВыражение = Новый РегулярноеВыражение(СтрокаПоиска);
	РегВыражение.ИгнорироватьРегистр = Истина;
	
	СтрокиМодуля = СтрРазделить(Данные, Символы.ПС, Истина);
	
	А = 0;
	Для Каждого Стр Из СтрокиМодуля Цикл
		А = А + 1;
		Совпадения = РегВыражение.НайтиСовпадения(Стр);
		Если Совпадения.Количество() > 0 Тогда
			Если РежимЗаполнения = "Поиск" Тогда
				СтрМетода = "(" + А + ") " + Стр;
				СписокДляВыбора.Вставить(А, СтрМетода);
			ИначеЕсли РежимЗаполнения = "ВыборИмениМетода" Тогда
				Для Каждого Сп Из Совпадения Цикл
					СпГр = Сп.Группы;
					СтрМетода = СпГр[2].Значение;
					СписокДляВыбора.Вставить(СтрМетода, СтрМетода);
				КонецЦикла;
			Иначе
				Для Каждого Сп Из Совпадения Цикл
					СпГр = Сп.Группы;
					СтрМетода = "(" + А + ") [" + Лев(СпГр[0].Значение, 1) + "] " + СпГр[2].Значение;
					СписокДляВыбора.Вставить(А, СтрМетода);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокДляВыбора;

КонецФункции

Функция ПодготовитьДанныеДляВыбора(СтрокаРВ, ВариантОбработки)
	
	РаботаСОкнами = Новый РаботаСОкнами();
	РаботаСОкнами.ЗапомнитьТекущееОкно();
	
	Данные = СредаРазработки.ТекстМодуля();
	СписокДляВыбора = СтрокиПоРегВыражению(Данные, СтрокаРВ, ВариантОбработки);
	Сообщить(Данные);
	Если СписокДляВыбора.Количество() = 0 Тогда

		Взаимодействие.УведомитьЧерезТрей("Нет данных для отображения", "Навигация по модулю");
		Возврат Неопределено;

	КонецЕсли;
	
	ВыборИзСписка = ЗагрузитьСценарий("core/SelectValue.os");
	Результат = ВыборИзСписка.ВыбратьИзСписка(СписокДляВыбора, Истина);
	РаботаСОкнами.АктивироватьЗапомненноеОкно();
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьМодуль(СтрокаРВ, ВариантОбработки = "")
	
	НомСтр = ПодготовитьДанныеДляВыбора(СтрокаРВ, ВариантОбработки);
	
	Если НомСтр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СредаРазработки.ПерейтиКСтрокеПоНомеру(НомСтр);
	
КонецПроцедуры

Функция ИмяСекции(Данные) Экспорт
	
	Возврат СтрокаПоРегВыражениюСнизуВверх(Данные, "^\s*(\#Область|\#region)\s+(.*)");
	
КонецФункции

Функция ИмяМетода(Данные)
	
	Возврат СтрокаПоРегВыражениюСнизуВверх(Данные, "^\s*(процедура|функция|procedure|function)\s+(.*)\(");
	
КонецФункции

Функция СтрокаПоРегВыражениюСнизуВверх(Данные, Шаблон)
	
	РегВыражение = Новый РегулярноеВыражение(Шаблон);
	РегВыражение.ИгнорироватьРегистр = Истина;
	
	СтрокиМодуля = СтрРазделить(Данные, Символы.ПС, Истина);
	КолСтрок = СтрокиМодуля.Количество() - 1;
	Для А = -КолСтрок По 0 Цикл
		Стр = СтрокиМодуля.Получить(- А);
		Совпадения = РегВыражение.НайтиСовпадения(Стр);
		Если Совпадения.Количество() > 0 Тогда
			Для Каждого Сп Из Совпадения Цикл
				СпГр = Сп.Группы;
				Возврат СокрЛП(СпГр[2].Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти
